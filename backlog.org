* DynamicBuilder base class
** DONE Support for settings properties
** DONE Properties of type DateTime set to a string will be tryparsed and set
** DONE Support for adding children
*** DONE ICollection<T>
*** DONE ICollection<T> with PropertyValueCollector
*** DONE IEnumerable<T> / AddEntityName
    BlogPost
      .Title("foo")
      .Body("bar")
      .Comment(With.Title("comment title")
                .Body("comment body));

    Property i testbasklass som heter With o returnerar ett dynamiskt objekt som bara samlar på sig
    key value av property namn och värde.
    Buildern kan sedan loopa igenom dictionaryn o sätta lämpliga värden.
** TODO Build child if argument is DynamicBuilder<ChildType>

* Dynamic fluent assertion
** Instance thru constructor
** Assert property values by daisy chaining

* Dictionary assertion
** Dictionary<string, T>

* Dynamic mock / stub
  var foo = DynamicMock.For<IFoo>();
  foo.SomeMethod(1, 2, 3).Returns(9)

* RhinoMocks
** DONE Overridable stub
   Perhaps an extension with WhenCalled that returns the value of a lambda, that uses some
   member which contains a reference to a return value

   ReturnValueProvider<double> returnValueProvider = ReturnValueProvider.Create(someValue);

   foo.Stub(x => x.Bar())
      .LazyReturnValue(returnValueProvider);

   returnValueProvider.Value = someOtherValue;

** DONE Extract arguments
*** DONE ExtractFirstParameterOfType<T>(x => _member = x);

** DONE Debug output for calls on expected method but with wrong parameters
** DONE Better error message for signals (not signalstate)
** DONE Signal that takes a flag object representing a single flag, to avoid having to specify a magic string
** TODO IEnumerable-constraints (andra intressanta constraints?)
